
Συμμετέχοντες:
Κατσαντώνης Νικόλαος ΑΕΜ 2170
Τολίκας Αθανάσιος ΑΕΜ 2206
Δεμάτης Ιωάννης ΑΕΜ 2157
Παπαρίδης Κωνσταντίνος ΑΕΜ 2222


Προσωμοίωση της δρομολόγησης CPU με τον αλγόριθμο SJF.
Η υλοποίηση έγινε σε JAVA.


Το προγραμμα αποτελείται από 9 κλάσεις:
- NewProcessTemporaryList
- CPU
- Process
- ProcessGenerator
- Clock
- ReadyProcessesList
- Statistics
- SJFScheduler
- Main

- NewProcessTemporaryList:
  Αναπαριστά μια λίστα στην οποία βρίσκονται οι διεργασίες που είναι σε κατάσταση new
	Με τη μέθοδο addNewProcess προστίθεται η διεργασία στη λίστα και έπειτα γίνεται ταξινόμηση σύμφωνα με τα arrivaltimes με τη βοήθεια
	της ενσωματομένης κλάσης Collections (με τη χρήση ενός αντικειμένου που υλοποιεί το interface Comparator). 
	Αν τα arrivaltimes είναι ίδια, τότε ως δεύτερο κριτήριο ταξινόμησης ορίζονται τα process id's (PID).

- CPU:
  Αναπαριστά την κεντρική μονάδα επεξεργασίας του συστήματος
	
- Process:
  Αναπαριστά μια διεργασία του συστήματος
	Με τη μεταβλητή cpuFirstTime ελέγχεται αν η διεργασία εκτελέστηκε από τη CPU την πρώτη φορά, ώστε να υπολογιστεί το response time.

- ProcessGenerator:
  Αναπαριστά μια γεννήτρια διεργασιών για την προσομοίωση
	Η αποθήκευση και η ανάγνωση των διεργασιών γίνεται ως αντικείμενα με τη βοήθεια των κλάσεων ObjectOutputStream και ObjectInputStream.
	Αυτό επιτυγχάνεται καθώς η κλάση Process υλοποιεί το interface Serializable.

- Clock:
  Αναπαριστά το ρολόι του συστήματος
	Το ρολόι αρχικοποιείται στο 0 και κάθε φορά που καλείται η μέθοδος Time_Run() αυξάνεται κατά μια χρονική μονάδα

- ReadyProcessesList:
  Αναπαριστά μια λίστα στην οποία τοποθετούνται οι διεργασίες που βρίσκονται σε κατάσταση ready
	Με τη μέθοδο addProcess προστίθεται η διεργασία στη λίστα και έπειτα γίνεται ταξινόμηση σύμφωνα με τον εναπομείναντα χρόνο στη CPU των διεργασιών.
	Αν οι χρόνοι είναι ίδιοι, τότε ως δεύτερο κριτήριο ταξινόμησης ορίζονται τα process id's (PID).
	Αυτό το επιτυγχάνεται με τη χρήση ενός αντικειμένου που υλοποιεί το interface Comparator.

- Statistics:
  Υπολογίζει ορισμένα στατιστικά στοιχεία της δρομολόγησης στο τέλος της εκτέλεσής της και τα αποθηκεύτει σε αρχείο (συνολικούς χρόνους και μέσους χρόνους)
	
- SJFScheduler:
  Αναπαριστά τη λειτουργία δρομολόγησης με τον αλγόριθμο SJF (με ή χωρίς προεκχώρηση)
	Στην αρχή ελέγχουμε αν υπάρχουν διεργασίες στη λίστα New που μπορούν να μεταφερθούν στη λίστα Ready
	και αυξάνεται το μήκος της λίστας Ready κατάλληλα. Αρχικά ελέγχεται αν η CPU είναι απασχολημένη από μια διεργασία ή όχι.
	Στην περίπτωση που ο αλγόριθμος είναι προεκχωρήσιμος, εκχωρείται η κατάλληλη διεργασία στη CPU συγκρίνοντας τους εναπομείναντες
	χρόνους καταιγισμού ανάμεσα στη διεργασία που πιθανώς να εκτελείται ήδη στη CPU με την κατάλληλη διεργασία από την ουρά Ready.
	Για μη προεκχώρηση συνεχίζεται η εκτέλεση της διεργασίας της CPU για όσο δηλώνει ο χρόνος καταιγισμού της. Έπειτα, ανανεώνονται
	οι συνολικοί χρόνοι απόκρισης και αναμονής και εκτελείται η διεργασία στη CPU για τη διάρκεια ενός χτύπου του ρολογιού. Τέλος,
	γίνεται έλεγχος αν η διεργασία που εκτελούνταν στη CPU πρέπει να αφαιρεθεί με το πέρας της εκτέλεσής της.

- Main
  Αρχικά εμφανίζεται στο χρήστη η επιλογή για αλγόριθμο ή έξοδο από την προσομοίωση. Στη συνέχεια, εφόσον υπάρχουν ήδη διεργασίες αποθηκευμένες στο
  αρχείο processes.txt από προηγούμενο κύκλο προσομοίωσης, δίνεται η δυνατότητα για φόρτωσή τους. Έπειτα, αρχικοποιούνται τα αντικείμενα της προσομοίωσης
  και, αν δεν έχουν φορτωθεί διεργασίες από αρχείο, δημιουργούνται αρχικά τρεις διεργασίες και αρχίζει ο κύριος βρόγχος της προσομοίωσης, δηλαδή ξεκινάει
  το ρολόι. Για κάθε άρτιο χτύπο του ρολογιού δημιουργείται μια νέα διεργασία με ψευδοτυχαία στοιχεία (στο σύνολο θα δημιουργηθούν 10 τέτοιες διεργασίες κατά την εκτέλεση).
  Έπειτα καλείται η μέθοδος SJF() της κλάσης SJFScheduler για τη δρομολόγηση των διεργασίων στη CPU για τον εκάστοτε χτύπο του ρολογιού.